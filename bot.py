import os
import logging
from datetime import datetime
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from aiogram.filters import Command, CommandObject
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
import asyncio
import aiohttp
import re
import json
from news_aggregator import NewsAggregator
from new_generator import DigestStyle, NewsAnalyzer, DigestGenerator
import random
from web_digest_module import DigestWebModule

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserStates(StatesGroup):
    waiting_for_count = State()          # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
    waiting_for_frequency = State()      # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —á–∞—Å—Ç–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    waiting_for_source = State()         # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    waiting_for_username = State()       # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

class NewsBot:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.news_aggregator = NewsAggregator()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-–º–æ–¥—É–ª—è
        try:
            flask_host = os.getenv('FLASK_HOST', '0.0.0.0')
            flask_port = int(os.getenv('FLASK_PORT', '5000'))
            self.web_module = DigestWebModule(host=flask_host, port=flask_port)
            self.web_interface_url = os.getenv('WEB_INTERFACE_URL', 'http://localhost:5000/digest')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–µ–±-–º–æ–¥—É–ª—è: {e}")
            self.web_module = None
            self.web_interface_url = None
        
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á Mistral –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        mistral_api_keys = os.getenv('MISTRAL_API_KEYS')
        if mistral_api_keys:
            try:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –∫–ª—é—á –∏–∑ –º–∞—Å—Å–∏–≤–∞ JSON
                api_keys = json.loads(mistral_api_keys)
                if isinstance(api_keys, list) and len(api_keys) > 0:
                    mistral_api_key = api_keys[2]
                else:
                    mistral_api_key = mistral_api_keys  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—É—é —Å—Ç—Ä–æ–∫—É
            except json.JSONDecodeError:
                # –ï—Å–ª–∏ –Ω–µ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—É—é —Å—Ç—Ä–æ–∫—É
                mistral_api_key = mistral_api_keys
        else:
            mistral_api_key = os.getenv('MISTRAL_API_KEY')
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã —Å API –∫–ª—é—á–æ–º
        try:
            self.news_analyzer = NewsAnalyzer(api_key=mistral_api_key)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä NewsAnalyzer –¥–ª—è DigestGenerator
            analyzer_for_generator = NewsAnalyzer(api_key=mistral_api_key)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DigestGenerator –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ NewsAnalyzer
            self.digest_generator = DigestGenerator()
            # –ó–∞–º–µ–Ω—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä NewsAnalyzer –Ω–∞ –Ω–∞—à —Å –∫–ª—é—á–æ–º
            self.digest_generator.analyzer = analyzer_for_generator
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Mistral AI: {e}")
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤
            self.news_analyzer = None
            self.digest_generator = None
        
        self.scheduled_jobs = {}
        self.news_count = int(os.getenv('DEFAULT_NEWS_COUNT', 5))
        self.update_frequency = int(os.getenv('DEFAULT_UPDATE_FREQUENCY', 24))
        self.include_analysis = True  # –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
        self.current_style = DigestStyle.STANDARD
        self.last_messages = []  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
        self.main_keyboard = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text='üì∞ –°–æ–∑–¥–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç'), KeyboardButton(text='üìã –ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏')],
            [KeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫'), KeyboardButton(text='‚ûñ –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫')],
            [KeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'), KeyboardButton(text='üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å'), KeyboardButton(text='‚ùì –ü–æ–º–æ—â—å')]
        ], resize_keyboard=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        self.bot = Bot(token=self.token, parse_mode=ParseMode.HTML)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–µ –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        self.dp = Dispatcher(storage=MemoryStorage())
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—è–∂–µ–ª—ã—Ö –∑–∞–¥–∞—á
        self._background_tasks = set()
        
        # –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥
        self.router = Router()
        self.dp.include_router(self.router)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()
        
    def _register_handlers(self):
        # –ö–æ–º–∞–Ω–¥—ã
        self.router.message.register(self.start, Command("start"))
        self.router.message.register(self.help, Command("help"))
        self.router.message.register(self.add_source, Command("add_source"))
        self.router.message.register(self.remove_source, Command("remove_source"))
        self.router.message.register(self.list_sources, Command("list_sources"))
        self.router.message.register(self.search_source, Command("search_source"))
        self.router.message.register(self.import_sources, Command("import_sources"))
        self.router.message.register(self.set_count, Command("set_count"))
        self.router.message.register(self.set_frequency, Command("set_frequency"))
        self.router.message.register(self.generate_digest, Command("generate"))
        self.router.message.register(self.set_style, Command("set_style"))
        self.router.message.register(self.styles, Command("styles"))
        self.router.message.register(self.toggle_analysis, Command("toggle_analysis"))
        self.router.message.register(self.publish_to_channel, Command("publish_to_channel"))
        self.router.message.register(self.settings, Command("settings"))
        self.router.message.register(self.generate_from_source, Command("from_source"))
        self.router.message.register(self.web_interface, Command("web"))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –∫–Ω–æ–ø–æ–∫ (–±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        self.router.message.register(self.generate_digest, F.text == 'üì∞ –°–æ–∑–¥–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç')
        self.router.message.register(self.list_sources, F.text == 'üìã –ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏')
        self.router.message.register(self.add_source_menu, F.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫')
        self.router.message.register(self.remove_source, F.text == '‚ûñ –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫')
        self.router.message.register(self.settings, F.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
        self.router.message.register(self.web_interface, F.text == 'üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å')
        self.router.message.register(self.help, F.text == '‚ùì –ü–æ–º–æ—â—å')
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.router.message.register(self.process_webapp_data, F.web_app_data)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        self.router.callback_query.register(self.button_callback)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞–∏–º–µ–Ω—å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã
        self.router.message.register(self.process_text_input, F.text)

    async def start(self, message: Message):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        user_first_name = message.from_user.first_name if message.from_user else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        welcome_message = (
            f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_first_name}!\n\n"
            f"–Ø –±–æ—Ç –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π. "
            f"–Ø –º–æ–≥—É —Å–æ–±–∏—Ä–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö Telegram-–∫–∞–Ω–∞–ª–æ–≤, —É–¥–∞–ª—è—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã, "
            f"—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã.\n\n"
            f"üîç <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</b>:\n"
            f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
            f"‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –ø–æ—Ö–æ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π\n"
            f"‚Ä¢ –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏\n"
            f"‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏\n"
            f"‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π\n\n"
            f"–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_source –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –ø–æ —Å–≤–æ–µ–º—É –≤–∫—É—Å—É.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
        )
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer(welcome_message, parse_mode='HTML', reply_markup=self.main_keyboard)
        
        # –ï—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å
        if not self.news_aggregator.get_sources(message.from_user.id):
            await message.answer(
                "üîî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π. "
                "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ "
                "—Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_source."
            )
            
        # –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥
        examples = (
            "–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:\n"
            "/add_source @centralbank_russia - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –ë–∞–Ω–∫–∞ –†–æ—Å—Å–∏–∏\n"
            "/generate - —Å–æ–∑–¥–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π\n"
            "/set_count 5 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ\n"
            "/set_style standard - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∏–ª—å –¥–∞–π–¥–∂–µ—Å—Ç–∞"
        )
        
        await message.answer(examples)

    async def help(self, message: Message):
        """–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞"""
        help_text = (
            "ü§ñ <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥</b>:\n\n"
            "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤</b>:\n"
            "/add_source [@username] - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∏\n"
            "/remove_source [@username] - —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n"
            "/list_sources - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n"
            "/import_sources - –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞\n\n"
            
            "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞</b>:\n"
            "/set_count [—á–∏—Å–ª–æ] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5)\n"
            "/set_frequency [—á–∞—Å—ã] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 24 —á–∞—Å–∞)\n"
            "/set_style [—Å—Ç–∏–ª—å] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∏–ª—å –¥–∞–π–¥–∂–µ—Å—Ç–∞\n"
            "/styles - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞\n"
            "/toggle_analysis - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤\n"
            "/settings - –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏\n\n"
            
            "<b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è</b>:\n"
            "/generate - —Å–æ–∑–¥–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n"
            "/publish_to_channel [@channel] - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª\n"
            "/from_source [–∏–º—è_–∫–∞–Ω–∞–ª–∞] - —Å–æ–∑–¥–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞\n\n"
            
            "<b>–°–ø—Ä–∞–≤–∫–∞</b>:\n"
            "/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )
        
        await message.answer(help_text, parse_mode='HTML')
        
        tips = (
            "üí° <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã</b>:\n\n"
            "‚Ä¢ –î–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –¥–æ–±–∞–≤—å—Ç–µ 5-10 –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n"
            "‚Ä¢ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ\n"
            "‚Ä¢ –î–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /settings –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"
        )
        
        await message.answer(tips, parse_mode='HTML')

    async def add_source(self, message: Message, command: CommandObject):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        if not command.args:
            await message.answer(
                "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.\n\n"
                "–ü—Ä–∏–º–µ—Ä: /add_source @channel_name\n"
                "–ò–ª–∏: /add_source https://t.me/channel_name\n\n"
                "–ö–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º."
            )
            return
            
        channel = command.args
        
        # –û—á–∏—â–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –æ—Ç URL –∏ @
        clean_channel = channel
        if 't.me/' in channel:
            clean_channel = channel.split('t.me/')[-1].split('/')[0]
        elif channel.startswith('@'):
            clean_channel = channel[1:]
            
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞
        if not re.match(r'^[a-zA-Z0-9_]+$', clean_channel):
            await message.answer(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞: {channel}\n"
                f"–ò–º—è –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è."
            )
            return
            
        status_msg = await message.answer(f"‚è≥ –î–æ–±–∞–≤–ª—è—é –∫–∞–Ω–∞–ª @{clean_channel}...")
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
        try:
            async with aiohttp.ClientSession() as session:
                url = f"https://t.me/s/{clean_channel}"
                headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
                
                async with session.get(url, headers=headers, timeout=10) as response:
                    if response.status != 200:
                        await status_msg.edit_text(
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É @{clean_channel}.\n"
                            f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –ø—É–±–ª–∏—á–Ω—ã–º."
                        )
                        return
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
                    html = await response.text()
                    if not html or "tgme_widget_message" not in html:
                        await status_msg.edit_text(
                            f"‚ùå –ö–∞–Ω–∞–ª @{clean_channel} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–º."
                        )
                        return
                    
                    # –ö–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                    result = await self.news_aggregator.add_source_async(clean_channel, user_id)
                    
                    if result:
                        await status_msg.edit_text(
                            f"‚úÖ –ö–∞–Ω–∞–ª @{clean_channel} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏!"
                        )
                    else:
                        await status_msg.edit_text(
                            f"‚ö†Ô∏è –ö–∞–Ω–∞–ª @{clean_channel} —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."
                        )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {e}")
            await status_msg.edit_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ @{clean_channel}.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def remove_source(self, message: Message, command: CommandObject = None):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        sources = await self.news_aggregator.get_sources_async(user_id)
        if not sources:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")
            return
            
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        if not command or not command.args:
            sources_list = await self.news_aggregator.get_source_details_async(user_id)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            buttons = []
            for source in sources_list:
                button_text = f"@{source['username']}"
                if source.get('name') and source['name'] != source['username']:
                    button_text += f" ({source['name']})"
                    
                buttons.append([InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"remove_source:{source['username']}"
                )])
                
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)
                
            await message.answer(
                "üóë –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=markup
            )
            return
            
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∏—Å—Ç–æ—á–Ω–∏–∫, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        channel = command.args
        
        # –û—á–∏—â–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –æ—Ç URL –∏ @
        clean_channel = channel
        if 't.me/' in channel:
            clean_channel = channel.split('t.me/')[-1].split('/')[0]
        elif channel.startswith('@'):
            clean_channel = channel[1:]
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if clean_channel not in sources:
            await message.answer(
                f"‚ùå –ö–∞–Ω–∞–ª @{clean_channel} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."
            )
            return
            
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
        result = await self.news_aggregator.remove_source_async(clean_channel, user_id)
        
        if result:
            await message.answer(
                f"‚úÖ –ö–∞–Ω–∞–ª @{clean_channel} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤!"
            )
        else:
            await message.answer(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ @{clean_channel}.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def list_sources(self, message: Message):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        sources_list = await self.news_aggregator.get_source_details_async(user_id)
        
        if not sources_list:
            await message.answer(
                "üìã –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_source, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫."
            )
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å–æ –≤—Å–µ–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
        buttons.append([
            InlineKeyboardButton(text="üì• –ü–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç", callback_data="generate_digest"),
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫", callback_data="add_source")
        ])
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
        for source in sources_list:
            username = source.get('username', '')
            button_text = f"@{username}"
            if source.get('name') and source['name'] != username:
                button_text += f" ({source['name']})"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            buttons.append([
                InlineKeyboardButton(
                    text=f"üì∞ {button_text}",
                    url=f"https://t.me/{username}"
                ),
                InlineKeyboardButton(
                    text="üóë –£–¥–∞–ª–∏—Ç—å",
                    callback_data=f"remove_source:{username}"
                )
            ])
        
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        sources_list.sort(key=lambda x: x.get('name', '').lower())
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        message_text = "üìã <b>–í–∞—à–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π</b>:\n\n"
        
        for i, source in enumerate(sources_list, 1):
            username = source.get('username', '')
            name = source.get('name', username)
            
            if name == username:
                message_text += f"{i}. <a href='https://t.me/{username}'>@{username}</a>\n"
            else:
                message_text += f"{i}. <a href='https://t.me/{username}'>{name}</a> (@{username})\n"
                
        message_text += "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –Ω–µ–º—É."
                
        try:
            await message.answer(message_text, parse_mode='HTML', reply_markup=markup)
        except Exception as e:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º,
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
            await self._show_simple_sources_list(message, sources_list)

    async def _show_simple_sources_list(self, message, sources_list):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏ –∏ –∫–Ω–æ–ø–æ–∫"""
        message_text = "üìã –í–∞—à–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:\n\n"
        
        for i, source in enumerate(sources_list, 1):
            username = source.get('username', '')
            name = source.get('name', username)
            
            if name == username:
                message_text += f"{i}. @{username}\n"
            else:
                message_text += f"{i}. {name} (@{username})\n"
                
        message_text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /remove_source @username –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞."
        
        await message.answer(message_text)

    async def _check_sources(self, message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = message.from_user.id
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        await self.news_aggregator.ensure_sources_loaded(user_id)
        
        # –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        sources = await self.news_aggregator.get_sources_async(user_id)
        
        if not sources:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_source, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫."
            )
            return False
            
        return True

    async def search_source(self, message: Message, command: CommandObject = None):
        """–ü–æ–∏—Å–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        
        if not command or not command.args:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞.\n"
                "–ü—Ä–∏–º–µ—Ä: /search_source economy"
            )
            return
            
        query = command.args.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        sources = await self.news_aggregator.get_source_details_async(user_id)
        
        if not sources:
            await message.answer(
                "üìã –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_source, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫."
            )
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        found_sources = []
        for source in sources:
            username = source.get('username', '').lower()
            name = source.get('name', '').lower()
            
            if query in username or query in name:
                found_sources.append(source)
        
        if not found_sources:
            await message.answer(
                f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: /list_sources"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
        sources_list = []
        for i, source in enumerate(found_sources, 1):
            username = source.get('username', '')
            name = source.get('name', username)
            
            # –ï—Å–ª–∏ –∏–º—è –∏ username —Å–æ–≤–ø–∞–¥–∞—é—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ username
            if name == username:
                sources_list.append(f"{i}. @{username}")
            else:
                sources_list.append(f"{i}. {name} (@{username})")
        
        sources_text = "\n".join(sources_list)
        
        await message.answer(
            f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' ({len(found_sources)}):\n\n"
            f"{sources_text}\n\n"
            f"–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è: /remove_source [username_–∫–∞–Ω–∞–ª–∞]"
        )

    async def import_sources(self, message: Message, command: CommandObject = None):
        """–ò–º–ø–æ—Ä—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ JSON"""
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if not hasattr(self.news_aggregator, 'db_manager') or self.news_aggregator.db_manager is None:
            await message.answer(
                "‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ò–º–ø–æ—Ä—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å –∏–º–µ–Ω–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if not command or not command.args:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è JSON-—Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞.\n"
                "–ü—Ä–∏–º–µ—Ä: /import_sources my_sources.json"
            )
            return
            
        json_file = command.args
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ JSON
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(json_file):
                await message.answer(
                    f"‚ùå –§–∞–π–ª {json_file} –Ω–µ –Ω–∞–π–¥–µ–Ω."
                )
                return
                
            # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON
            with open(json_file, 'r', encoding='utf-8') as file:
                channels = json.load(file)
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            added_count = self.news_aggregator.db_manager.import_from_json(channels, user_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.news_aggregator._load_sources_for_user_async(user_id)
            
            await message.answer(
                f"‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n"
                f"–î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–∑ {len(channels)}.\n\n"
                f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: /list_sources"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
            await message.answer(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {str(e)}"
            )

    async def styles(self, message: Message):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∏–ª–µ–π —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∏ —ç–º–æ–¥–∑–∏
        style_emojis = {
            DigestStyle.STANDARD: "üì∞",
            DigestStyle.COMPACT: "üìù",
            DigestStyle.MEDIA: "üì±",
            DigestStyle.CARDS: "üóÇÔ∏è",
            DigestStyle.ANALYTICS: "üìä",
            DigestStyle.SOCIAL: "üì£"
        }
        
        styles_list = []
        for style in DigestStyle:
            emoji = style_emojis.get(style, "üîπ")
            description = self._get_style_description(style)
            styles_list.append(f"{emoji} <b>{style.value}</b> - {description}")
        
        styles_text = "\n".join(styles_list)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
        keyboard = []
        for style in DigestStyle:
            keyboard.append([InlineKeyboardButton(text=f"{style_emojis.get(style, 'üîπ')} {style.value}", callback_data=f"style_{style.value}")])
        
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await message.answer(
            f"üé® <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞</b>:\n\n"
            f"{styles_text}\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å</b>: {self.current_style.value}\n\n"
            f"–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∏–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_style [–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—Ç–∏–ª—è] –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        
    def _get_style_description(self, style: DigestStyle) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
        descriptions = {
            DigestStyle.STANDARD: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            DigestStyle.COMPACT: "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —á—Ç–µ–Ω–∏—è, –º–∏–Ω–∏–º—É–º —Ç–µ–∫—Å—Ç–∞",
            DigestStyle.MEDIA: "–ú–µ–¥–∏–∞-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
            DigestStyle.CARDS: "–ö–∞–∂–¥–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞",
            DigestStyle.ANALYTICS: "–§–æ—Ä–º–∞—Ç —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã",
            DigestStyle.SOCIAL: "–°—Ç–∏–ª—å –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏ –∏ –∫—Ä–∞—Ç–∫–∏–º–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞–º–∏"
        }
        return descriptions.get(style, "–°—Ç–∏–ª—å –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")

    async def set_count(self, message: Message, command: CommandObject = None):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ"""
        if not command or not command.args:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π (1-20).\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "/set_count 5"
            )
            return
            
        try:
            count = int(command.args)
            if 1 <= count <= 20:
                self.news_count = count
                await message.answer(
                    f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {count}\n"
                    f"–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å {count} —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π."
                )
            else:
                await message.answer(
                    "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 20.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ."
                )
        except ValueError:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "/set_count 5"
            )
            
    async def set_frequency(self, message: Message, command: CommandObject = None):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
        if not command or not command.args:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —á–∞—Å–∞—Ö (1-48).\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "/set_frequency 24"
            )
            return
            
        try:
            hours = int(command.args)
            if 1 <= hours <= 48:
                self.update_frequency = hours
                await message.answer(
                    f"‚úÖ –ß–∞—Å—Ç–æ—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: –∫–∞–∂–¥—ã–µ {hours} —á–∞—Å–æ–≤.\n"
                    f"–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –∫–∞–∂–¥—ã–µ {hours} —á–∞—Å–æ–≤."
                )
                
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                await self._reschedule_jobs(message)
            else:
                await message.answer(
                    "‚ùå –ß–∞—Å—Ç–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 48 —á–∞—Å–æ–≤.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ."
                )
        except ValueError:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "/set_frequency 24"
            )

    async def _check_sources(self, message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = message.from_user.id
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        await self.news_aggregator.ensure_sources_loaded(user_id)
        
        # –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        sources = await self.news_aggregator.get_sources_async(user_id)
        
        if not sources:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_source, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫."
            )
            return False
            
        return True

    async def generate_digest(self, message: Message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if not await self._check_sources(message):
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        status_msg = await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –∏ –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ —Ñ–æ–Ω–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–∞ Telegram
        task = asyncio.create_task(self._generate_digest_background(
            chat_id=message.chat.id, 
            status_msg_id=status_msg.message_id,
            user_id=user_id
        ))
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–±—Ä–∞–Ω–∞ —Å–±–æ—Ä—â–∏–∫–æ–º –º—É—Å–æ—Ä–∞
        self._background_tasks.add(task)
        task.add_done_callback(self._background_tasks.discard)

    async def _generate_digest_background(self, chat_id, status_msg_id, user_id):
        """–§–æ–Ω–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await self.bot.edit_message_text(
                "‚è≥ –°–æ–±–∏—Ä–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...",
                chat_id=chat_id,
                message_id=status_msg_id
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            start_time = datetime.now()
            news_list = await self.news_aggregator.get_latest_news(
                hours=self.update_frequency,
                user_id=user_id
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            logger.info(f"–§–æ–Ω–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: news_count={self.news_count}, style={self.current_style.value}, include_analysis={self.include_analysis}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await asyncio.sleep(1)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            sources = list(self.news_aggregator.get_sources(user_id))
            if not sources:
                await self.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=status_msg_id,
                    text="‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—É—Å—Ç! –î–æ–±–∞–≤—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å –ø–æ–º–æ—â—å—é /add_source.",
                    parse_mode=ParseMode.HTML
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_msg_id,
                text=f"‚è≥ –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ {len(sources)} –∫–∞–Ω–∞–ª–æ–≤...",
                parse_mode=ParseMode.HTML
            )
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏
            try:
                all_news = await self.news_aggregator.get_latest_news(hours=24, user_id=user_id)
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≤—Å–µ–≥–æ {len(all_news)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
                await self.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=status_msg_id,
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode=ParseMode.HTML
                )
                return
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            news_by_source = {}
            for news_item in all_news:
                source = news_item.get('source')
                if source:
                    if source not in news_by_source:
                        news_by_source[source] = []
                    news_by_source[source].append(news_item)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for i, source in enumerate(sources):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if len(sources) > 3 and i > 0 and i % 2 == 0:
                    try:
                        source_news_count = len(news_by_source.get(source, []))
                        await self.bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=status_msg_id,
                            text=f"‚è≥ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π: –∫–∞–Ω–∞–ª {i+1}/{len(sources)} - @{source} ({source_news_count} –Ω–æ–≤–æ—Å—Ç–µ–π)",
                            parse_mode=ParseMode.HTML
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
                if i < len(sources) - 1:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                    await asyncio.sleep(0.3)
            
            # –ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
            if not all_news:
                await self.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=status_msg_id,
                    text="‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.",
                    parse_mode=ParseMode.HTML
                )
                return
                
            await self.bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_msg_id,
                text=f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(all_news)} –Ω–æ–≤–æ—Å—Ç–µ–π...\n"
                     f"–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ...",
                parse_mode=ParseMode.HTML
            )
                    
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Ä–∞–Ω–∂–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏
            news = self.news_aggregator.remove_duplicates(all_news)
            news = self.news_aggregator.rank_news(news)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
            news = news[:self.news_count]
            logger.info(f"–ü–æ—Å–ª–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π={len(news)}, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç={self.news_count}")
            
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
            if not news:
                await self.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=status_msg_id,
                    text="‚ÑπÔ∏è –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.",
                    parse_mode=ParseMode.HTML
                )
                return
                    
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ - –ê–°–ò–ù–•–†–û–ù–ù–û
            await self.bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_msg_id,
                text=f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–∞–π–¥–∂–µ—Å—Ç –∏–∑ {len(news)} –Ω–æ–≤–æ—Å—Ç–µ–π...\n"
                     f"–ê–Ω–∞–ª–∏–∑ –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...",
                parse_mode=ParseMode.HTML
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
            analyzed_news = []
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(news)} –Ω–æ–≤–æ—Å—Ç–µ–π, –ª–∏–º–∏—Ç={self.news_count}")
            for i, news_item in enumerate(news):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π
                if len(news) > 3 and i > 0 and i % 2 == 0:
                    try:
                        await self.bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=status_msg_id,
                            text=f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–∞–π–¥–∂–µ—Å—Ç –∏–∑ {len(news)} –Ω–æ–≤–æ—Å—Ç–µ–π...\n"
                                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i}/{len(news)} –Ω–æ–≤–æ—Å—Ç–µ–π",
                            parse_mode=ParseMode.HTML
                        )
                    except Exception as e:
                        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
                raw_text = news_item['text']
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç—å
                analyzed = await self._analyze_news_item(raw_text, news_item.get('url'))
                if analyzed:
                    analyzed_news.append(analyzed)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
                if i < len(news) - 1:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–æ–≤–æ—Å—Ç–∏
                    await asyncio.sleep(0.5)
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
            if not analyzed_news:
                await self.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=status_msg_id,
                    text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode=ParseMode.HTML
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
            overall_analysis = None
            if self.include_analysis:
                await self.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=status_msg_id,
                    text=f"‚è≥ –í—ã–ø–æ–ª–Ω—è—é –∞–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ {len(analyzed_news)} –Ω–æ–≤–æ—Å—Ç–µ–π...",
                    parse_mode=ParseMode.HTML
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
                await asyncio.sleep(2)
                
                try:
                    overall_analysis = await asyncio.wait_for(
                        self._generate_overall_analysis(analyzed_news),
                        timeout=90  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    )
                except asyncio.TimeoutError:
                    logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
            try:
                await self.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=status_msg_id,
                    text=f"‚è≥ –§–æ—Ä–º–∏—Ä—É—é –∏—Ç–æ–≥–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç...",
                    parse_mode=ParseMode.HTML
                )
                
                # –ù–æ–º–µ—Ä –¥–∞–π–¥–∂–µ—Å—Ç–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –¥–æ–±–∞–≤–∏–≤ —É—á–µ—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤)
                digest_number = datetime.now().strftime("%Y%m%d%H")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DigestGenerator
                summary = self.digest_generator.generate_digest(
                    analyzed_news=analyzed_news,
                    digest_number=int(digest_number) % 100,  # –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –±–µ—Ä–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è
                    style=self.current_style
                )
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –∏ –æ–Ω –≤–∫–ª—é—á–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–æ–Ω–µ—Ü
                if overall_analysis and self.include_analysis:
                    summary += f"\n\n<b>üìä –ê–ù–ê–õ–ò–ó –¢–ï–ù–î–ï–ù–¶–ò–ô:</b>\n{overall_analysis}\n\n"
                elif "üìä –ê–ù–ê–õ–ò–ó –¢–ï–ù–î–ï–ù–¶–ò–ô:" in summary and not self.include_analysis:
                    # –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π –æ—Ç–∫–ª—é—á–µ–Ω, –Ω–æ –æ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —à–∞–±–ª–æ–Ω–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞,
                    # —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    pattern = r'\n*<b>üìä –ê–ù–ê–õ–ò–ó –¢–ï–ù–î–ï–ù–¶–ò–ô:</b>\n.*?\n\n'
                    summary = re.sub(pattern, '\n\n', summary, flags=re.DOTALL)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –≤ –∫–æ–Ω–µ—Ü –¥–∞–π–¥–∂–µ—Å—Ç–∞
                sources_used = set()
                for news_item in analyzed_news:
                    if 'source' in news_item:
                        sources_used.add(news_item['source'])
                
                if sources_used:
                    sources_list = ", ".join([f"@{source}" for source in sorted(sources_used)])
                    summary += f"\n\n<i>–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {sources_list}</i>"
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self.bot.delete_message(chat_id=chat_id, message_id=status_msg_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                if len(summary) > 4000:
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
                    parts = [summary[i:i+4000] for i in range(0, len(summary), 4000)]
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ –æ–¥–Ω—É –∑–∞ –¥—Ä—É–≥–æ–π
                    for i, part in enumerate(parts):
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –æ —á–∞—Å—Ç–∏ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
                        if len(parts) > 1:
                            part_header = f"<b>–ß–∞—Å—Ç—å {i+1}/{len(parts)}</b>\n\n"
                            if i > 0:  # –î–ª—è –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π
                                part = part_header + part
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await self.bot.send_message(
                            chat_id=chat_id,
                            text=part,
                            parse_mode=ParseMode.HTML,
                            disable_web_page_preview=False
                        )
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    await self.bot.send_message(
                        chat_id=chat_id,
                        text=summary,
                        parse_mode=ParseMode.HTML,
                        disable_web_page_preview=False
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
                await self.bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode=ParseMode.HTML
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            try:
                await self.bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞.\n"
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode=ParseMode.HTML
                )
            except Exception as send_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")
    
    async def _analyze_news_item(self, raw_text, url=None):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –æ—Ç 0.5 –¥–æ 1.5 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
            await asyncio.sleep(0.5 + random.random())
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.to_thread –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            # —ç—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –æ—Å–≤–æ–±–æ–¥–∏—Ç—å event loop –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—Ä—É–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            loop = asyncio.get_running_loop()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Mistral AI –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            analyzed = await loop.run_in_executor(
                None,  # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å default executor
                lambda: self.news_analyzer.analyze_news(
                    raw_text=raw_text,
                    style=self.current_style
                )
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
            if url:
                analyzed['link'] = url
            
            return analyzed
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            return None
    
    async def _generate_overall_analysis(self, analyzed_news):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—è–∂–µ–ª—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_running_loop()
            
            return await loop.run_in_executor(
                None,  # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å default executor
                lambda: self.news_analyzer.generate_overall_analysis(
                    analyzed_news, 
                    style=self.current_style
                )
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return None
    
    async def _reschedule_jobs(self, message):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π —Å –Ω–æ–≤–æ–π —á–∞—Å—Ç–æ—Ç–æ–π"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞–Ω–∏–π
        # –í aiogram 3 –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É APScheduler
        # –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
        # –≠—Ç–æ –Ω–µ –±—ã–ª–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ
        pass

    async def _send_message_safe(self, message, text, parse_mode=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            return await message.answer(
                text=text,
                parse_mode=parse_mode,
                disable_web_page_preview=False
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if parse_mode == 'HTML':
                plain_text = self._strip_html_tags(text)
                return await message.answer(
                    text=plain_text,
                    disable_web_page_preview=False
                )
            else:
                raise

    def _strip_html_tags(self, text):
        """–£–¥–∞–ª–µ–Ω–∏–µ HTML-—Ç–µ–≥–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        return re.sub(r'<[^>]+>', '', text)

    async def set_style(self, message: Message, command: CommandObject = None):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
        if not message:
            logger.error("–û—à–∏–±–∫–∞ –≤ set_style: message –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return
           
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        if command and command.args:
            style_name = command.args.lower()
            try:
                new_style = DigestStyle(style_name)
                self.current_style = new_style
                 
                # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–ª—è
                style_description = self._get_style_description(new_style)
                 
                await message.answer(
                    f"‚úÖ –°—Ç–∏–ª—å –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <b>{new_style.value}</b>.\n\n"
                    f"<i>{style_description}</i>",
                    parse_mode='HTML'
                )
                     
            except ValueError:
                # –ï—Å–ª–∏ —Å—Ç–∏–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                available_styles = [style.value for style in DigestStyle]
                styles_text = ", ".join(available_styles)
                 
                await message.answer(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å '{style_name}'.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏: {styles_text}")
            return
           
        # –ï—Å–ª–∏ —Å—Ç–∏–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏
        available_styles = [style.value for style in DigestStyle]
        styles_text = "\n".join([f"‚Ä¢ {style}" for style in available_styles])
           
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
        keyboard = []
        style_emojis = {
            DigestStyle.STANDARD: "üì∞",
            DigestStyle.COMPACT: "üìù",
            DigestStyle.MEDIA: "üì±",
            DigestStyle.CARDS: "üóÇÔ∏è",
            DigestStyle.ANALYTICS: "üìä",
            DigestStyle.SOCIAL: "üì£"
        }
        for style in DigestStyle:
            keyboard.append([InlineKeyboardButton(
                text=f"{style_emojis.get(style, 'üîπ')} {style.value}", 
                callback_data=f"style_{style.value}"
            )])
           
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
           
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ —Å—Ç–∏–ª–µ–π
        styles_desc = []
        for style in DigestStyle:
            emoji = style_emojis.get(style, "")
            desc = self._get_style_description(style)
            styles_desc.append(f"{emoji} <b>{style.value}</b>: {desc}")
           
        styles_text = "\n\n".join(styles_desc)
           
        await message.answer(
            "üé® <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞</b>\n\n"
            f"{styles_text}\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å: <b>{self.current_style.value}</b>",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

    async def toggle_analysis(self, message: Message):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ"""
        self.include_analysis = not self.include_analysis
        status = "–≤–∫–ª—é—á–µ–Ω" if self.include_analysis else "–æ—Ç–∫–ª—é—á–µ–Ω"
        
        await message.answer(
            f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ {status}.\n\n"
            f"{'üîç –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –≤ –Ω–æ–≤–æ—Å—Ç—è—Ö –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤ –¥–∞–π–¥–∂–µ—Å—Ç.' if self.include_analysis else 'üì∞ –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –±–µ–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤.'}"
        )

    async def settings(self, message: Message):
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        keyboard = [
            [
                InlineKeyboardButton(
                    text=f"üìä {'–í—ã–∫–ª—é—á–∏—Ç—å' if self.include_analysis else '–í–∫–ª—é—á–∏—Ç—å'} –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤",
                    callback_data="toggle_analysis"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π",
                    callback_data="set_count_menu"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üïí –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                    callback_data="set_frequency_menu"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üé® –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å –¥–∞–π–¥–∂–µ—Å—Ç–∞",
                    callback_data="set_style_menu"
                )
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await message.answer(
            f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
            f"–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π: <b>{self.news_count}</b>\n"
            f"‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: <b>–∫–∞–∂–¥—ã–µ {self.update_frequency} —á–∞—Å–æ–≤</b>\n"
            f"‚Ä¢ –°—Ç–∏–ª—å –¥–∞–π–¥–∂–µ—Å—Ç–∞: <b>{self.current_style.value}</b>\n"
            f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤: <b>{'–≤–∫–ª—é—á–µ–Ω' if self.include_analysis else '–æ—Ç–∫–ª—é—á–µ–Ω'}</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

    async def publish_to_channel(self, message: Message, command: CommandObject = None):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª"""
        if not command or not command.args:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.\n"
                "–ü—Ä–∏–º–µ—Ä: /publish_to_channel @my_channel\n\n"
                "‚ö†Ô∏è –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ —Å –ø—Ä–∞–≤–æ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."
            )
            return
            
        channel = command.args
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞
        if not (channel.startswith('@') or 't.me/' in channel):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞. –£–∫–∞–∂–∏—Ç–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ @channel_name –∏–ª–∏ —Å—Å—ã–ª–∫—É https://t.me/channel_name"
            )
            return
            
        # –û—á–∏—â–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞
        clean_channel = channel
        if 't.me/' in channel:
            clean_channel = channel.split('t.me/')[-1].split('/')[0]
        elif channel.startswith('@'):
            clean_channel = channel[1:]
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if not await self._check_sources(message):
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            chat_member = await self.bot.get_chat_member(f"@{clean_channel}", self.bot.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            if not chat_member.status in ['administrator', 'creator']:
                await message.answer(
                    f"‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ @{clean_channel}.\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."
                )
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ {clean_channel}: {e}")
            await message.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ @{clean_channel}.\n"
                f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            return
            
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –ø—É–±–ª–∏–∫—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
        status_msg = await message.answer(f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ @{clean_channel}...")
        
        try:
            # –õ–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –º–µ—Ç–æ–¥—É generate_digest
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
            news = await self.news_aggregator.get_latest_news(hours=24, user_id=message.from_user.id)
            
            if not news:
                await status_msg.edit_text(
                    f"‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
                )
                return
                
            await status_msg.edit_text(
                f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(news)} –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∫–∞–Ω–∞–ª–∞ @{clean_channel}..."
            )
                
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Ä–∞–Ω–∂–∏—Ä—É–µ–º
            news = self.news_aggregator.remove_duplicates(news)
            news = self.news_aggregator.rank_news(news)
            news = news[:self.news_count]
            
            if not news:
                await status_msg.edit_text(
                    f"‚ÑπÔ∏è –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
                )
                return
                
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏
            await status_msg.edit_text(
                f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–∞–π–¥–∂–µ—Å—Ç –∏–∑ {len(news)} –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∫–∞–Ω–∞–ª–∞ @{clean_channel}..."
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –Ω–æ–≤–æ—Å—Ç—å
            analysis_tasks = []
            for news_item in news:
                task = asyncio.create_task(self._analyze_news_item(news_item['text'], news_item.get('url')))
                analysis_tasks.append(task)
                
            analyzed_news_results = await asyncio.gather(*analysis_tasks)
            analyzed_news = [result for result in analyzed_news_results if result is not None]
            
            if not analyzed_news:
                await status_msg.edit_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
                )
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑
            overall_analysis = None
            if self.include_analysis:
                try:
                    overall_analysis = await asyncio.wait_for(
                        self._generate_overall_analysis(analyzed_news),
                        timeout=60
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
                    
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
            digest_number = datetime.now().strftime("%Y%m%d%H")
            
            summary = self.digest_generator.generate_digest(
                analyzed_news=analyzed_news,
                digest_number=int(digest_number) % 100,
                style=self.current_style
            )
            
            if overall_analysis and self.include_analysis:
                summary += f"\n\n<b>üìä –ê–ù–ê–õ–ò–ó –¢–ï–ù–î–ï–ù–¶–ò–ô:</b>\n{overall_analysis}\n\n"
                
            # –ü—É–±–ª–∏–∫—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –≤ –∫–∞–Ω–∞–ª
            await status_msg.edit_text(
                f"‚è≥ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª @{clean_channel}..."
            )
            
            # –ï—Å–ª–∏ –¥–∞–π–¥–∂–µ—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            if len(summary) > 4000:
                parts = [summary[i:i+4000] for i in range(0, len(summary), 4000)]
                
                for i, part in enumerate(parts):
                    if len(parts) > 1:
                        part_header = f"<b>–ß–∞—Å—Ç—å {i+1}/{len(parts)}</b>\n\n"
                        if i > 0:
                            part = part_header + part
                            
                    await self.bot.send_message(
                        chat_id=f"@{clean_channel}",
                        text=part,
                        parse_mode='HTML',
                        disable_web_page_preview=False
                    )
            else:
                await self.bot.send_message(
                    chat_id=f"@{clean_channel}",
                    text=summary,
                    parse_mode='HTML',
                    disable_web_page_preview=False
                )
                
            await status_msg.edit_text(
                f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ @{clean_channel}!"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            await status_msg.edit_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}"
            )

    async def button_callback(self, callback_query: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        data = callback_query.data
        user_id = callback_query.from_user.id
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        if data == "generate_digest":
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
            await callback_query.answer("–ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–π–¥–∂–µ—Å—Ç–∞...")
            await self.generate_digest(callback_query.message)
            
        elif data == "add_source":
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            await callback_query.answer("–£–∫–∞–∂–∏—Ç–µ Telegram –∫–∞–Ω–∞–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
            await state.set_state(UserStates.waiting_for_source)
            await callback_query.message.answer(
                "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è Telegram –∫–∞–Ω–∞–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: @channelname –∏–ª–∏ https://t.me/channelname"
            )
            
        elif data.startswith("remove_source:"):
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
            source = data.split(":", 1)[1]
            await callback_query.answer(f"–£–¥–∞–ª—è—é –∏—Å—Ç–æ—á–Ω–∏–∫ @{source}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —ç—Ç–æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫
            user_sources = await self.news_aggregator.get_sources_async(user_id)
            if source in user_sources:
                result = await self.news_aggregator.remove_source_async(source, user_id)
                if result:
                    await callback_query.message.reply(f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ @{source} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –∑–∞–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞
                    if "–í–∞—à–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π" in callback_query.message.text:
                        await self.list_sources(callback_query.message)
                else:
                    await callback_query.message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ @{source}")
            else:
                await callback_query.message.reply(f"‚ö†Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫ @{source} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.")
                
        elif data.startswith("from_source:"):
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            source = data.split(":", 1)[1]
            await callback_query.answer(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–∞–π–¥–∂–µ—Å—Ç –∏–∑ @{source}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —ç—Ç–æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫
            user_sources = await self.news_aggregator.get_sources_async(user_id)
            if source in user_sources:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
                status_msg = await callback_query.message.reply(f"‚è≥ –°–æ–±–∏—Ä–∞—é –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ @{source}...")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ —Ñ–æ–Ω–µ
                task = asyncio.create_task(self._generate_from_source_background(
                    chat_id=callback_query.message.chat.id,
                    status_msg_id=status_msg.message_id,
                    source=source,
                    user_id=user_id
                ))
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–±—Ä–∞–Ω–∞ —Å–±–æ—Ä—â–∏–∫–æ–º –º—É—Å–æ—Ä–∞
                self._background_tasks.add(task)
                task.add_done_callback(self._background_tasks.discard)
            else:
                await callback_query.message.reply(f"‚ö†Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫ @{source} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.")

    async def add_source_menu(self, message: Message, state: FSMContext):
        """–ú–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        await state.set_state(UserStates.waiting_for_source)
        await message.answer(
            "‚ûï –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username –∏–ª–∏ https://t.me/username"
        )

    async def process_text_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_state = await state.get_state()
        user_id = message.from_user.id
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if current_state == UserStates.waiting_for_count.state:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
            try:
                count = int(message.text.strip())
                if count < 1 or count > 50:
                    await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 50. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
                    return
                    
                self.news_count = count
                await state.clear()
                await message.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {count}", reply_markup=self.main_keyboard)
                
            except ValueError:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50:")
                
        elif current_state == UserStates.waiting_for_frequency.state:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑—ã–≤–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            try:
                hours = int(message.text.strip())
                if hours < 1 or hours > 168:  # –ú–∞–∫—Å–∏–º—É–º –Ω–µ–¥–µ–ª—è (7 * 24 = 168 —á–∞—Å–æ–≤)
                    await message.answer("‚ùå –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 168 —á–∞—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
                    return
                    
                self.update_frequency = hours
                await state.clear()
                await message.answer(f"‚úÖ –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {hours} —á.", reply_markup=self.main_keyboard)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
                await self._reschedule_jobs(message)
                
            except ValueError:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 168:")
                
        elif current_state == UserStates.waiting_for_source.state:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            channel = message.text.strip()
            
            # –û—á–∏—â–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –æ—Ç URL –∏ @
            clean_channel = channel
            if 't.me/' in channel:
                clean_channel = channel.split('t.me/')[-1].split('/')[0]
            elif channel.startswith('@'):
                clean_channel = channel[1:]
                
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞
            if not re.match(r'^[a-zA-Z0-9_]+$', clean_channel):
                await message.answer(
                    f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞: {channel}\n"
                    f"–ò–º—è –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return
                
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await state.clear()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞
            status_msg = await message.answer(f"‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ @{clean_channel}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
            try:
                async with aiohttp.ClientSession() as session:
                    url = f"https://t.me/s/{clean_channel}"
                    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
                    
                    async with session.get(url, headers=headers, timeout=10) as response:
                        if response.status != 200:
                            await status_msg.edit_text(
                                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É @{clean_channel}.\n"
                                f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –ø—É–±–ª–∏—á–Ω—ã–º."
                            )
                            return
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
                        html = await response.text()
                        if "tgme_widget_message" not in html:
                            await status_msg.edit_text(
                                f"‚ùå –ö–∞–Ω–∞–ª @{clean_channel} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–º."
                            )
                            return
                        
                        # –ö–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                        result = await self.news_aggregator.add_source_async(clean_channel, user_id)
                        
                        if result:
                            await status_msg.edit_text(
                                f"‚úÖ –ö–∞–Ω–∞–ª @{clean_channel} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π!"
                            )
                            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç
                            markup = InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="üì∞ –°–æ–∑–¥–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç", callback_data="generate_digest")]
                            ])
                            await message.answer(
                                "–•–æ—Ç–∏—Ç–µ —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç —Å –Ω–æ–≤—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º?",
                                reply_markup=markup
                            )
                        else:
                            await status_msg.edit_text(
                                f"‚ö†Ô∏è –ö–∞–Ω–∞–ª @{clean_channel} —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."
                            )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {e}")
                await status_msg.edit_text(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ @{clean_channel}.\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.token:
            logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
            return
            
        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –µ—Å–ª–∏ –æ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if self.web_module:
                import threading
                
                # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                web_thread = threading.Thread(
                    target=self.web_module.run,
                    kwargs={"debug": False},
                    daemon=True  # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
                )
                web_thread.start()
                logger.info(f"–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.web_module.host}:{self.web_module.port}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
            from apscheduler.schedulers.asyncio import AsyncIOScheduler
            scheduler = AsyncIOScheduler()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            scheduler.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await self.dp.start_polling(
                self.bot,
                polling_timeout=10,  # –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                allowed_updates=[
                    "message",
                    "edited_message",
                    "callback_query",
                    "inline_query"
                ],
                handle_signals=True,
                close_bot_session=True,
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏
                skip_updates=True
            )
        except (KeyboardInterrupt, SystemExit):
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            for task in self._background_tasks:
                task.cancel()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            if self._background_tasks:
                await asyncio.wait(self._background_tasks)
                
            await self.bot.session.close()
            
    async def generate_from_source(self, message: Message, command: CommandObject = None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        user_id = message.from_user.id
        
        if not command or not command.args:
            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            sources_list = await self.news_aggregator.get_source_details_async(user_id)
            
            if not sources_list:
                await message.answer(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_source, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫."
                )
                return
                
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            buttons = []
            
            for source in sources_list:
                button_text = f"@{source['username']}"
                if source.get('name') and source['name'] != source['username']:
                    button_text += f" ({source['name']})"
                    
                buttons.append([InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"from_source:{source['username']}"
                )])
            
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)
                
            await message.answer(
                "üì∞ –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞:",
                reply_markup=markup
            )
            return
            
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∏—Å—Ç–æ—á–Ω–∏–∫, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –∏–∑ –Ω–µ–≥–æ
        source = command.args
        
        # –û—á–∏—â–∞–µ–º –∏–º—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –æ—Ç URL –∏ @
        clean_source = source
        if 't.me/' in source:
            clean_source = source.split('t.me/')[-1].split('/')[0]
        elif source.startswith('@'):
            clean_source = source[1:]
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_sources = await self.news_aggregator.get_sources_async(user_id)
        if clean_source not in user_sources:
            await message.answer(
                f"‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ @{clean_source} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /list_sources, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."
            )
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        status_msg = await message.answer(f"‚è≥ –°–æ–±–∏—Ä–∞—é –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ @{clean_source}...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ —Ñ–æ–Ω–µ
        task = asyncio.create_task(self._generate_from_source_background(
            chat_id=message.chat.id,
            status_msg_id=status_msg.message_id,
            source=clean_source,
            user_id=user_id
        ))
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–±—Ä–∞–Ω–∞ —Å–±–æ—Ä—â–∏–∫–æ–º –º—É—Å–æ—Ä–∞
        self._background_tasks.add(task)
        task.add_done_callback(self._background_tasks.discard)

    async def _generate_from_source_background(self, chat_id, status_msg_id, source, user_id):
        """–§–æ–Ω–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            logger.info(f"–§–æ–Ω–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ @{source}: news_count={self.news_count}, style={self.current_style.value}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await asyncio.sleep(1)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_msg_id,
                text=f"‚è≥ –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∫–∞–Ω–∞–ª–∞ @{source}...",
                parse_mode=ParseMode.HTML
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏, –∞ –∑–∞—Ç–µ–º —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏
                all_news = await self.news_aggregator.get_latest_news(hours=24, user_id=user_id)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
                news = [item for item in all_news if item.get('source') == source]
                
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(news)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∫–∞–Ω–∞–ª–∞ @{source} (–≤—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(all_news)})")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
                await self.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=status_msg_id,
                    text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∫–∞–Ω–∞–ª–∞ @{source}.",
                    parse_mode=ParseMode.HTML
                )
                return
            
            # –ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
            if not news:
                await self.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=status_msg_id,
                    text=f"‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –≤ –∫–∞–Ω–∞–ª–µ @{source}.",
                    parse_mode=ParseMode.HTML
                )
                return
                
            await self.bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_msg_id,
                text=f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(news)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∫–∞–Ω–∞–ª–∞ @{source}...\n"
                     f"–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ...",
                parse_mode=ParseMode.HTML
            )
                    
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Ä–∞–Ω–∂–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏
            news = self.news_aggregator.remove_duplicates(news)
            news = self.news_aggregator.rank_news(news)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
            news = news[:self.news_count]
            logger.info(f"–ü–æ—Å–ª–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–∫–∞–Ω–∞–ª @{source}): –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π={len(news)}, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç={self.news_count}")
            
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
            if not news:
                await self.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=status_msg_id,
                    text=f"‚ÑπÔ∏è –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∫–∞–Ω–∞–ª–µ @{source}.",
                    parse_mode=ParseMode.HTML
                )
                return
                    
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ - –ê–°–ò–ù–•–†–û–ù–ù–û
            await self.bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_msg_id,
                text=f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–∞–π–¥–∂–µ—Å—Ç –∏–∑ {len(news)} –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–Ω–∞–ª–∞ @{source}...\n"
                     f"–ê–Ω–∞–ª–∏–∑ –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...",
                parse_mode=ParseMode.HTML
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
            analyzed_news = []
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(news)} –Ω–æ–≤–æ—Å—Ç–µ–π, –ª–∏–º–∏—Ç={self.news_count}")
            for i, news_item in enumerate(news):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π
                if len(news) > 3 and i > 0 and i % 2 == 0:
                    try:
                        await self.bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=status_msg_id,
                            text=f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–∞–π–¥–∂–µ—Å—Ç –∏–∑ {len(news)} –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–Ω–∞–ª–∞ @{source}...\n"
                                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i}/{len(news)} –Ω–æ–≤–æ—Å—Ç–µ–π",
                            parse_mode=ParseMode.HTML
                        )
                    except Exception as e:
                        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
                raw_text = news_item['text']
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç—å
                analyzed = await self._analyze_news_item(raw_text, news_item.get('url'))
                if analyzed:
                    analyzed_news.append(analyzed)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
                if i < len(news) - 1:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–æ–≤–æ—Å—Ç–∏
                    await asyncio.sleep(0.5)
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
            if not analyzed_news:
                await self.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=status_msg_id,
                    text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode=ParseMode.HTML
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
            overall_analysis = None
            if self.include_analysis:
                await self.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=status_msg_id,
                    text=f"‚è≥ –í—ã–ø–æ–ª–Ω—è—é –∞–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ {len(analyzed_news)} –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–Ω–∞–ª–∞ @{source}...",
                    parse_mode=ParseMode.HTML
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
                await asyncio.sleep(2)
                
                try:
                    overall_analysis = await asyncio.wait_for(
                        self._generate_overall_analysis(analyzed_news),
                        timeout=90  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    )
                except asyncio.TimeoutError:
                    logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            else:
                logger.info("–ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
            try:
                await self.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=status_msg_id,
                    text=f"‚è≥ –§–æ—Ä–º–∏—Ä—É—é –∏—Ç–æ–≥–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –∫–∞–Ω–∞–ª–∞ @{source}...",
                    parse_mode=ParseMode.HTML
                )
                
                # –ù–æ–º–µ—Ä –¥–∞–π–¥–∂–µ—Å—Ç–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –¥–æ–±–∞–≤–∏–≤ —É—á–µ—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤)
                digest_number = datetime.now().strftime("%Y%m%d%H")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DigestGenerator
                summary = self.digest_generator.generate_digest(
                    analyzed_news=analyzed_news,
                    digest_number=int(digest_number) % 100,  # –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –±–µ—Ä–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è
                    style=self.current_style
                )
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –∏ –æ–Ω –≤–∫–ª—é—á–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–æ–Ω–µ—Ü
                if overall_analysis and self.include_analysis:
                    summary += f"\n\n<b>üìä –ê–ù–ê–õ–ò–ó –¢–ï–ù–î–ï–ù–¶–ò–ô:</b>\n{overall_analysis}\n\n"
                elif "üìä –ê–ù–ê–õ–ò–ó –¢–ï–ù–î–ï–ù–¶–ò–ô:" in summary and not self.include_analysis:
                    # –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π –æ—Ç–∫–ª—é—á–µ–Ω, –Ω–æ –æ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —à–∞–±–ª–æ–Ω–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞,
                    # —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    pattern = r'\n*<b>üìä –ê–ù–ê–õ–ò–ó –¢–ï–ù–î–ï–ù–¶–ò–ô:</b>\n.*?\n\n'
                    summary = re.sub(pattern, '\n\n', summary, flags=re.DOTALL)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –≤ –∫–æ–Ω–µ—Ü –¥–∞–π–¥–∂–µ—Å—Ç–∞
                sources_used = set()
                for news_item in analyzed_news:
                    if 'source' in news_item:
                        sources_used.add(news_item['source'])
                
                if sources_used:
                    sources_list = ", ".join([f"@{source}" for source in sorted(sources_used)])
                    summary += f"\n\n<i>–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {sources_list}</i>"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞–π–¥–∂–µ—Å—Ç–∞
                summary = f"<b>üì∞ –î–ê–ô–î–ñ–ï–°–¢ –ö–ê–ù–ê–õ–ê @{source}</b>\n\n" + summary
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self.bot.delete_message(chat_id=chat_id, message_id=status_msg_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                if len(summary) > 4000:
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
                    parts = [summary[i:i+4000] for i in range(0, len(summary), 4000)]
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ –æ–¥–Ω—É –∑–∞ –¥—Ä—É–≥–æ–π
                    for i, part in enumerate(parts):
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –æ —á–∞—Å—Ç–∏ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
                        if len(parts) > 1:
                            part_header = f"<b>–ß–∞—Å—Ç—å {i+1}/{len(parts)}</b>\n\n"
                            if i > 0:  # –î–ª—è –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π
                                part = part_header + part
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await self.bot.send_message(
                            chat_id=chat_id,
                            text=part,
                            parse_mode=ParseMode.HTML,
                            disable_web_page_preview=False
                        )
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    await self.bot.send_message(
                        chat_id=chat_id,
                        text=summary,
                        parse_mode=ParseMode.HTML,
                        disable_web_page_preview=False
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
                await self.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∫–∞–Ω–∞–ª–∞ @{source}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode=ParseMode.HTML
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            try:
                await self.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∫–∞–Ω–∞–ª–∞ @{source}.\n"
                         f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode=ParseMode.HTML
                )
            except Exception as send_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")

    async def web_interface(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        if not self.web_module or not self.web_interface_url:
            await message.answer(
                "‚ùå –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª–µ .env:"
                "```\n"
                "FLASK_HOST=0.0.0.0\n"
                "FLASK_PORT=5000\n"
                "WEB_INTERFACE_URL=http://localhost:5000/digest\n"
                "```"
            )
            return
            
        user_id = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        import hashlib
        import time
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        secret_key = os.getenv('SECRET_KEY', 'default_secret_key')
        current_time = str(int(time.time()))
        token_data = f"{user_id}:{current_time}:{secret_key}"
        access_token = hashlib.sha256(token_data.encode()).hexdigest()
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î
            from db_manager import MongoDBManager
            db_manager = MongoDBManager()
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ (24 —á–∞—Å–∞)
            import datetime
            expiry = datetime.datetime.now() + datetime.timedelta(hours=24)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = db_manager.save_web_token(
                user_id=user_id,
                token=access_token,
                username=username or first_name,
                expiry=expiry
            )
            
            if not result:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                personalized_url = self.web_interface_url
            else:
                # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é URL —Å —Ç–æ–∫–µ–Ω–æ–º
                personalized_url = f"{self.web_interface_url}?token={access_token}&username={username or first_name}"
            
            # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
            inline_markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ", url=personalized_url)]
            ])
            
            # –°–æ–∑–¥–∞–µ–º WebApp –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ Telegram
            webapp_button = InlineKeyboardButton(
                text="üì± –û—Ç–∫—Ä—ã—Ç—å –≤ Telegram",
                web_app=WebAppInfo(url=personalized_url)
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º WebApp –∫–Ω–æ–ø–∫—É
            inline_markup.inline_keyboard.insert(0, [webapp_button])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await message.answer(
                f"üåê <b>–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤</b>\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–¥–æ–±–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–π–¥–∂–µ—Å—Ç–∞–º–∏.\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:\n\n"
                f"‚Ä¢ <b>–û—Ç–∫—Ä—ã—Ç—å –≤ Telegram</b> - –∑–∞–ø—É—Å—Ç–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ Telegram\n"
                f"‚Ä¢ <b>–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ</b> - –æ—Ç–∫—Ä–æ–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ",
                reply_markup=inline_markup,
                parse_mode=ParseMode.HTML
            )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def process_webapp_data(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            data = json.loads(message.web_app_data.data)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
            if data.get('action') == 'share_digest':
                digest_text = data.get('digest', '–î–∞–π–¥–∂–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –≤ —á–∞—Ç
                await message.answer(
                    f"üì∞ <b>–í–∞—à —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –¥–∞–π–¥–∂–µ—Å—Ç</b>\n\n{digest_text}",
                    parse_mode=ParseMode.HTML
                )
            else:
                await message.answer(
                    "–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ."
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
            )

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = NewsBot()
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
    asyncio.run(bot.run())